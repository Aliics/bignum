use fmt;
use bignum;

export fn main() void = {
	const a = bignum::from_string
	defer free(a);

	const b = bignum::from_string("509834902814902180941274897487721874627601265876348756398275638765901513578345098109865193856783454736895763298576")!;
	defer free(b);

	const c = bignum::mul(a, b);
	defer free(c);

	const d = bignum::add(a, b);
	defer free(d);

	const cs = bignum::string(c);
	defer free(cs);

	const ds = bignum::string(d);
	defer free(ds);

	fmt::println(cs)!;
	fmt::println(ds)!;
};
